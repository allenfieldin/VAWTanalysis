function NewInterferenceFactor = CalcUpwindFunctionCARDAA(obj,InterferenceFactor,node)
V = InterferenceFactor*obj.WindSimulation.Vatmospheric(node);
localTSR = (obj.windTurbine.blade.localRadius(node)*obj.rotationalSpeed)/V;
ExpressionForUse = sqrt(((localTSR-sin(obj.azimuthalThitaUpwind.rad)).^2)+((cos(obj.azimuthalThitaUpwind.rad).^2).*(cos(obj.windTurbine.blade.delta(node)))^2));
localRelativeVelocity = V*ExpressionForUse;
localReynoldNumber = ((obj.windTurbine.blade.BladeReynoldsNumber*obj.windTurbine.blade.ni(node))/localTSR)*ExpressionForUse;
AngleOfAttack = asin((cos(obj.azimuthalThitaUpwind.rad).*cos(obj.windTurbine.blade.delta(node)))./ExpressionForUse);
[Cl,Cd] = obj.windTurbine.blade.airfoil.getClCd_rad(localReynoldNumber,AngleOfAttack,obj.Stall,localRelativeVelocity,obj.timestepPerThitaNode,obj.ThitaNodePerSide,obj.rotationalSpeed,obj.speedOfSound,obj.windTurbine.blade.thickness,obj.windTurbine.blade.chord,obj.azimuthalThitaUpwind.rad);
[Cn,Ct] = obj.CnCtCalc(Cl,Cd,AngleOfAttack);
ExpressionForUse2 = ((Cn.*(cos(obj.azimuthalThitaUpwind.rad)./abs(cos(obj.azimuthalThitaUpwind.rad))))-Ct.*(sin(obj.azimuthalThitaUpwind.rad)./(abs(cos(obj.azimuthalThitaUpwind.rad))*cos(obj.windTurbine.blade.delta(node))))).*((localRelativeVelocity/V).^2)*deg2rad(obj.dthita);
fup = ((obj.windTurbine.NumOfBlades*obj.windTurbine.blade.chord)/(8*pi*obj.windTurbine.blade.R))*ExpressionForUse2;
fup = trapz(fup);
NewInterferenceFactor = (pi*obj.windTurbine.blade.ni(node))/(fup+pi*obj.windTurbine.blade.ni(node));